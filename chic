#!/bin/bash -eu

. $(dirname $0)/lib/args.sh

base_dir="${1:-}"
if [ -z "$base_dir" ]; then
	usage
	exit 1
fi

chicfile="$base_dir/Chicfile"
if [ ! -f "$chicfile" ]; then
	echo "Chicfile not found in $base_dir" >&2
	exit 1
fi

. $(dirname $0)/lib/termination.sh
. $(dirname $0)/lib/aws-setup.sh

# Build bootstrap

working_dir=$(mktemp -d)
echo "* Building bootstrap in $working_dir" >&2

bootstrap_script=
ami=
ssh_username=ubuntu

COPY() {
	local i
	local dest="${@:$#}"
	for ((i=1; i<$#; i++)) {
		COPY_ONE "${@:$i:1}" "$dest"
	}
}

COPY_ONE() {
	local source="${1:-}"
	local dest="${2:-}"

	if [ -z "$source" -o -z "$dest" ]; then
		echo "usage: COPY <source> <dest>" >&2
		return 1
	fi
	if [[ "$dest" =~ \.\. ]]; then
		echo "COPY dest must not include ..s: $dest" >&2
		return 1
	fi

	# Trim leading /s
	while [[ "$dest" =~ ^/ ]]; do
		dest=$(echo "$dest" | cut -c2-)
	done

	echo "  * Copying $source to $dest" >&2

	pushd "$base_dir" >/dev/null
	if [ -d "$source" ]; then
		mkdir -p "$working_dir/$dest"
	else
		mkdir -p "$working_dir/$(dirname $dest)"
	fi
	
	rsync -a --exclude "**/.git*" --exclude "**/.hg*" --exclude "**/.DS_Store" "$source" "$working_dir/$dest"
	result=$?

	popd >/dev/null
	return $result
}

BOOTSTRAP() {
	bootstrap_script="$1"
	echo "  * Bootstrap script: $bootstrap_script" >&2
}

FROM() {
	ami="$1"
	echo "  * Source AMI: $ami" >&2
}

INSTANCE_TYPE() {
	if [ -z "$instance_type" ]; then
		instance_type="$1"
		echo "  * Instance type: $instance_type" >&2
	else
		echo "  * Instance type: $instance_type [overriden]" >&2
	fi
}

NAME() {
	if [ -z "$name" ]; then
		name="$1"
		echo "  * Name: $name" >&2
	else
		echo "  * Name: $name [overriden]" >&2
	fi
}

SSH_USERNAME() {
	ssh_username="$1"
	echo "  * SSH username: $ssh_username" >&2
}

# Run Chicfile
. "$chicfile"

if [ -z "$ami" ]; then
	echo "Chicfile must contain FROM" >&2
	terminate
	exit 1
fi
if [ -z "$ssh_username" ]; then
	echo "Chicfile must contain SSH_USERNAME" >&2
	terminate
	exit 1
fi

# Create bootstrap archive
archive=$(mktemp)
pushd "$working_dir" > /dev/null && tar -czf "$archive" * && popd > /dev/null

date_stamp=$(date +%Y%m%d%H%M%S)

my_public_ip=$(curl --silent http://checkip.amazonaws.com/)

describe_stack_status() {
	aws cloudformation describe-stacks $global_aws_options \
		--stack-name "$1" \
		--output text \
		--query 'Stacks[].StackStatus'
}

describe_stack_outputs() {
	aws cloudformation describe-stacks $global_aws_options \
		--stack-name "$1" \
		--output text \
		--query 'Stacks[].Outputs[].[OutputKey,OutputValue]'
}

describe_stack_events() {
	aws cloudformation describe-stack-events $global_aws_options \
		--stack-name "$1" \
		--output table \
		--query 'StackEvents[].[LogicalResourceId, ResourceStatus, ResourceType, ResourceStatusReason, Timestamp]'
}

extract_stack_output() {
	echo "$describe_stacks" | grep "^$1\t" | cut -f2
}

# Build image

image_stack_name="chic-image-${date_stamp}"

echo "* Creating image stack: $image_stack_name" >&2
aws cloudformation create-stack $global_aws_options \
	--stack-name "$image_stack_name" \
	--template-body file://$(dirname $0)/lib/build-image.yml \
	--capabilities CAPABILITY_IAM \
	--disable-rollback \
	--parameters \
	ParameterKey=ImageId,ParameterValue="$ami" \
	ParameterKey=InstanceType,ParameterValue="${instance_type:-t2.micro}" \
	ParameterKey=KeyName,ParameterValue="$key_name" \
	ParameterKey=SSHLocation,ParameterValue="$my_public_ip/32" \
	> /dev/null

stack_state=
echo -n "* Waiting for image stack to complete" >&2
while [ -z "$stack_state" -o "$stack_state" == "CREATE_IN_PROGRESS" ]; do
	sleep 5
	echo -n . >&2
	stack_state=$(describe_stack_status "$image_stack_name")
done
echo >&2

if [ "$stack_state" != "CREATE_COMPLETE" ]; then
	echo "Unexpected image stack state: $stack_state" >&2

	describe_stack_events "$image_stack_name"

	terminate y
	exit 1
fi

describe_stacks=$(describe_stack_outputs "$image_stack_name")

instance_id=$(extract_stack_output BuildInstanceId)
instance_public_ip=$(extract_stack_output BuildInstancePublicIp)
if [ -z "$instance_id" ]; then
	echo "Didn't get instance id from image stack" >&2
	terminate y
	exit 1
fi

# Run bootstrap
#rsync -a -e "ssh -i \"$keypair_file\" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --rsync-path="sudo rsync" "$working_dir"/ $ssh_username@$instance_public_ip:/
ssh_options="-i \"$keypair_file\" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
scp $ssh_options "$archive" $ssh_username@$instance_public_ip:/tmp/bootstrap.tar.gz

remote_commands="$(cat <<EOF
set -e
pushd /
sudo tar zxfo /tmp/bootstrap.tar.gz
popd
set +e
if [ ! -z "$bootstrap_script" ]; then
	sudo $bootstrap_script
fi
EOF
)"

set +e
ssh -i "$keypair_file" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
	$ssh_username@$instance_public_ip "$remote_commands" >&2
if [ $? != 0 ]; then
	echo "Failed to run bootstrap script" >&2
	terminate y
	exit 1
fi

set -e

echo "* Creating AMI" >&2
new_ami_id=$(aws ec2 create-image $global_aws_options \
	--instance-id $instance_id --name "chic-$instance_id" \
	--description "AMI built using Chic" \
	--query ImageId --output text)

# Add tags
if [ ! -z "$tags" ]; then
	echo "* Tagging AMI" >&2
	aws ec2 create-tags $global_aws_options --resources $new_ami_id --tags $tags
fi

new_ami_state=
echo -n "* Waiting for AMI to complete" >&2
while [ -z "$new_ami_state" -o "$new_ami_state" == "pending" ]; do
	sleep 10
	echo -n . >&2
	new_ami_state=$(aws ec2 describe-images $global_aws_options --image-ids "$new_ami_id" --query Images[].State --output text)
done
echo >&2

terminate

echo "$new_ami_id"
