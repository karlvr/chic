#!/bin/bash -eu

set +u
profile="$CHIC_PROFILE"
region="$CHIC_REGION"
set -u

name=
instance_type=
tags=
quiet=0
noninteractive=

usage() {
	echo "usage: $0 [-i <instance type>]" >&2
	echo "          [-n <output ami name>] [-t <tag key>=<value>]+" >&2
	echo "          [-p <profile>] [-r <region>]" >&2
	echo "          [-f <config file>]" >&2
	echo "          [-d] [-q] [-b] <basedir>" >&2
	echo >&2
	echo " -d Dry run" >&2
	echo " -q Quiet" >&2
	echo " -b Non-interactive mode" >&2
}

while getopts ":f:i:n:t:p:r:dqb" opt; do
	case $opt in
    	f)
			set -a # So all variables set are exported for our template engine
			source "$OPTARG"
			set +a
	      	;;
		i)
			instance_type="$OPTARG"
			;;
	    n)
			name="$OPTARG"
			;;
		t)
			tag_key=$(echo "$OPTARG" | cut -d = -f 1)
			tag_value=$(echo "$OPTARG" | cut -d = -f 2)
			tags="${tags:-} Key=$tag_key,Value=\"$tag_value\""
			;;
		p)
			profile="$OPTARG"
			;;
		r)
			region="$OPTARG"
			;;
	    d)
			additional_aws_options="${additional_aws_options:-} --dry-run"
			;;
		q)
			quiet=1
			;;
		b)
			noninteractive=1
			;;
    	\?)
	      	echo "Invalid option: -$OPTARG" >&2
	      	;;
	esac
done

if [ ! -z "$name" ]; then
	tags="${tags:-} Key=Name,Value=\"$name\""
fi

shift $((OPTIND-1))

base_dir="${1:-}"
if [ -z "$base_dir" ]; then
	usage
	exit 1
fi

chicfile="$base_dir/Chicfile"

if [ ! -f "$chicfile" ]; then
	echo "Chicfile not found in $base_dir" >&2
	exit 1
fi

# Build bootstrap

working_dir=$(mktemp -d)
echo "* Building bootstrap in $working_dir" >&2

bootstrap_script=
ami=

COPY() {
	source="${1:-}"
	dest="${2:-}"

	if [ -z "$source" -o -z "$dest" ]; then
		echo "usage: COPY <source> <dest>" >&2
		return 1
	fi
	if [[ "$dest" =~ \.\. ]]; then
		echo "COPY dest must not include ..s: $dest" >&2
		return 1
	fi

	# Trim leading /s
	while [[ "$dest" =~ ^/ ]]; do
		dest=$(echo "$dest" | cut -c2-)
	done

	echo "* Copying $source to $dest" >&2

	pushd "$base_dir" >/dev/null
	if [ -d "$source" ]; then
		mkdir -p "$working_dir/$dest"
	else
		mkdir -p "$working_dir/$(dirname $dest)"
	fi
	
	rsync -a --exclude "**/.git*" --exclude "**/.hg*" --exclude "**/.DS_Store" "$source" "$working_dir/$dest"
	result=$?

	popd >/dev/null
	return $result
}

BOOTSTRAP() {
	bootstrap_script="$1"
}

FROM() {
	ami="$1"
}

INSTANCE_TYPE() {
	chicfile_instance_type="$1"
}

# Run Chicfile
. "$chicfile"

if [ -z "$ami" ]; then
	echo "Chicfile must contain FROM" >&2
	exit 1
fi

if [ -z "$instance_type" -a ! -z "${chicfile_instance_type:-}" ]; then
	instance_type="$chicfile_instance_type"
fi

# Create bootstrap archive
archive=$(mktemp)
pushd "$working_dir" > /dev/null && tar -czf "$archive" . && popd > /dev/null

date_stamp=$(date +%Y%m%d%H%M%S)

# AWS configuration
global_aws_options=
if [ ! -z "${profile:-}" ]; then
	global_aws_options="$global_aws_options --profile $profile"
fi
if [ ! -z "${region:-}" ]; then
	global_aws_options="$global_aws_options --region $region"
fi

# Termination

prompt_yn() {
	local prompt_message="$1"
	local prompt_response=""
	while [ "$prompt_response" != "y" -a "$prompt_response" != "n" ]; do
		read -e -p "$prompt_message (y/n) " prompt_response
	done
	echo "$prompt_response"
}

terminate() {
	unclean="${1:-}"

	if [ ! -z "$unclean" -a -z "$noninteractive" ]; then
		local delete_response=$(prompt_yn "Delete stacks")
		if [ "$delete_response" == "n" ]; then
			return 0
		fi
	fi

	if [ ! -z "${bucket:-}" ]; then
		echo "* Deleting bootstrap bucket..." >&2
		AWS_ACCESS_KEY_ID="$bucket_access_key" AWS_SECRET_ACCESS_KEY="$bucket_secret_access_key" \
			aws s3 rm "s3://$bucket/" \
			--recursive --quiet
	fi

	echo "* Deleting stacks..." >&2
	if [ ! -z "${bucket_stack_name:-}" ]; then
		aws cloudformation delete-stack $global_aws_options --stack-name "$bucket_stack_name"
	fi
	if [ ! -z "${image_stack_name:-}" ]; then
		aws cloudformation delete-stack $global_aws_options --stack-name "$image_stack_name"
	fi

	rm -f "$archive"
	if [ ! -z "$working_dir" ]; then
		rm -rf "$working_dir"
	fi
}

trap ctrl_c INT

ctrl_c() {
	echo "* Cancelling" >&2
	terminate y
	exit 1
}

# Build bootstrap bucket
bucket_stack_name="chic-bucket-${date_stamp}"

echo "* Creating bucket stack: $bucket_stack_name" >&2
aws cloudformation create-stack $global_aws_options \
	--stack-name "$bucket_stack_name" \
	--disable-rollback \
	--template-body file://$(dirname $0)/lib/bucket.yml \
	--capabilities CAPABILITY_IAM > /dev/null

describe_stack_status() {
	aws cloudformation describe-stacks $global_aws_options \
		--stack-name "$1" \
		--output text \
		--query 'Stacks[].StackStatus'
}

describe_stack_outputs() {
	aws cloudformation describe-stacks $global_aws_options \
		--stack-name "$1" \
		--output text \
		--query 'Stacks[].Outputs[].OutputValue'
}

describe_stack_events() {
	aws cloudformation describe-stack-events $global_aws_options \
		--stack-name "$1" \
		--output table \
		--query 'StackEvents[].[LogicalResourceId, ResourceStatus, ResourceType, ResourceStatusReason, Timestamp]'
}

stack_state=
echo -n "* Waiting for bucket stack to complete" >&2
while [ -z "$stack_state" -o "$stack_state" == "CREATE_IN_PROGRESS" ]; do
	sleep 5
	echo -n . >&2
	stack_state=$(describe_stack_status "$bucket_stack_name")
done
echo >&2

if [ "$stack_state" != "CREATE_COMPLETE" ]; then
	echo "Unexpected bucket stack state: $stack_state" >&2

	describe_stack_events "$bucket_stack_name"
	terminate y
	exit 1
fi

describe_stacks=$(describe_stack_outputs "$bucket_stack_name")

bucket=$(echo $describe_stacks | cut -f1 -d ' ')
bucket_access_key=$(echo $describe_stacks | cut -f2 -d ' ')
bucket_secret_access_key=$(echo $describe_stacks | cut -f3 -d ' ')

upload_bootstrap() {
	AWS_ACCESS_KEY_ID="$bucket_access_key" AWS_SECRET_ACCESS_KEY="$bucket_secret_access_key" \
		aws s3 cp "$archive" s3://$bucket/bootstrap.tar.gz \
		--quiet
	return $?
}

echo "* Uploading bootstrap" >&2
set +e
upload_bootstrap
if [ $? != 0 ]; then
	sleep 5
	upload_bootstrap

	if [ $? != 0 ]; then
		echo "Failed to upload bootstrap archive" >&2
		terminate y
		exit 1
	fi
fi
set -e

image_stack_name="chic-image-${date_stamp}"

echo "* Creating image stack: $image_stack_name" >&2
aws cloudformation create-stack $global_aws_options \
	--stack-name "$image_stack_name" \
	--template-body file://$(dirname $0)/lib/build-image.yml \
	--capabilities CAPABILITY_IAM \
	--disable-rollback \
	--parameters ParameterKey=BuildBucketName,ParameterValue="$bucket" \
	ParameterKey=ImageId,ParameterValue="$ami" \
	ParameterKey=InstanceType,ParameterValue="${instance_type:-t2.micro}" \
	ParameterKey=BootstrapScriptPath,ParameterValue="$bootstrap_script" \
	> /dev/null

stack_state=
echo -n "* Waiting for image stack to complete" >&2
while [ -z "$stack_state" -o "$stack_state" == "CREATE_IN_PROGRESS" ]; do
	sleep 5
	echo -n . >&2
	stack_state=$(describe_stack_status "$image_stack_name")
done
echo >&2

if [ "$stack_state" != "CREATE_COMPLETE" ]; then
	echo "Unexpected image stack state: $stack_state" >&2

	describe_stack_events "$image_stack_name"

	if [ -z "$noninteractive" ]; then
		# console_response=$(prompt_yn "View instance console")
		# if [ "$console_response" == "y" ]; then
		# 	instance_id=$(aws ec2 describe-instances $global_aws_options \
		# 		--filters Name=tag:Name,Values="chic-image-builder-${image_stack_name}" \
		# 		Name=instance-state-name,Values=running,pending \
		# 		--output text \
		# 		--query Reservations[].Instances[].InstanceId)
		# 	if [ ! -z "$instance_id" ]; then
		# 		aws ec2 get-console-output $global_aws_options --instance-id "$instance_id" --output text | ${PAGER:-less}
		# 	else
		# 		echo "InstanceId not found" >&2
		# 	fi
		# fi

		# Logs
		logfile=$(mktemp)
		set +e
		AWS_ACCESS_KEY_ID="$bucket_access_key" AWS_SECRET_ACCESS_KEY="$bucket_secret_access_key" \
			aws s3 cp s3://$bucket/logs/cfn-init.log "$logfile" --quiet
		if [ $? == 0 ]; then
			log_response=
			if [ -z "$noninteractive" ]; then
				log_response=$(prompt_yn "View cfn-init.log")
				if [ "$log_response" == "y" ]; then
					${PAGER:-less} "$logfile"
				fi
			else
				cat "$logfile" >&2
			fi
		fi
		rm -f "$logfile"
		set -e
	fi

	terminate y
	exit 1
fi

describe_stacks=$(describe_stack_outputs "$image_stack_name")

instance_id=$(echo $describe_stacks | cut -f1 -d ' ')

echo "* Creating AMI" >&2
new_ami_id=$(aws ec2 create-image $global_aws_options \
	--instance-id $instance_id --name "chic-$instance_id" \
	--description "AMI built using Chic" \
	--query ImageId --output text)

# Add tags
if [ ! -z "$tags" ]; then
	echo "* Tagging AMI" >&2
	aws ec2 create-tags $global_aws_options --resources $new_ami_id --tags $tags
fi

new_ami_state=
echo -n "* Waiting for AMI to complete" >&2
while [ -z "$new_ami_state" -o "$new_ami_state" == "pending" ]; do
	sleep 10
	echo -n . >&2
	new_ami_state=$(aws ec2 describe-images $global_aws_options --image-ids "$new_ami_id" --query Images[].State --output text)
done
echo >&2

terminate

echo "$new_ami_id"
